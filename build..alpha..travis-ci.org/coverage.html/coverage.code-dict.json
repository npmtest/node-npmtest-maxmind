{"/home/travis/build/npmtest/node-npmtest-maxmind/test.js":"/* istanbul instrument in package npmtest_maxmind */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-maxmind/lib.npmtest_maxmind.js":"/* istanbul instrument in package npmtest_maxmind */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_maxmind = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_maxmind = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-maxmind/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-maxmind && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_maxmind */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_maxmind\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_maxmind.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_maxmind.rollup.js'] =\n            local.assetsDict['/assets.npmtest_maxmind.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_maxmind.__dirname + '/lib.npmtest_maxmind.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-maxmind/node_modules/maxmind/index.js":"'use strict';\n\nvar assert = require('assert');\nvar fs = require('fs');\nvar Reader = require('./lib/reader');\nvar ip = require('./lib/ip');\nvar isGzip = require('./lib/is-gzip');\nvar utils = require('./lib/utils');\n\nexports.Reader = Reader;\n\nexports.open = function(filepath, opts, cb) {\n  if (!cb) cb = opts;\n  assert.equal(typeof cb, 'function', 'Callback function must be provided. \\\n    If you want to open library synchronously, use maxmind.openSync function.');\n\n  fs.readFile(filepath, function(err, database) {\n    if (err) return cb(err);\n    if (isGzip(database)) {\n      return cb(new Error('Looks like you are passing in a file in gzip format, please use mmdb database instead.'));\n    }\n    var reader = new Reader(database, opts);\n    if (opts && !!opts.watchForUpdates) {\n      fs.watch(filepath, function() {\n        fs.readFile(filepath, function(err, database) {\n          if (err) return cb(err);\n          reader.load(database);\n        });\n      });\n    }\n    cb(null, reader);\n  });\n};\n\nexports.openSync = function(filepath, opts) {\n  var reader = new Reader(fs.readFileSync(filepath), opts);\n  if (opts && !!opts.watchForUpdates) {\n    fs.watch(filepath, function() {\n      reader.load(fs.readFileSync(filepath));\n    });\n  }\n\n  return reader;\n};\n\nexports.init = function() {\n  throw new Error(utils.legacyErrorMessage);\n};\n\nexports.validate = ip.validate;\n","/home/travis/build/npmtest/node-npmtest-maxmind/node_modules/maxmind/lib/reader.js":"'use strict';\n\nvar LRU = require('lru-cache');\nvar Metadata = require('./metadata');\nvar Decoder = require('./decoder');\nvar ipUtil = require('./ip');\nvar utils = require('./utils');\n\nvar DATA_SECTION_SEPARATOR_SIZE = 16;\n\n\nmodule.exports = Reader;\n\nfunction Reader(db, opts) {\n  opts = opts || {};\n  opts.cache = opts.cache || {};\n  opts.cache.max = opts.cache.max || 50000;\n  opts.cache.maxAge = opts.cache.maxAge || 60 * 60 * 1000; // 1hr\n\n  this.cache = LRU(opts.cache);\n  this.load(db);\n}\n\nReader.prototype.load = function(db) {\n  this.db = db;\n\n  this.metadata = new Metadata(this.db);\n  this.decoder = new Decoder(this.db, this.metadata.searchTreeSize + DATA_SECTION_SEPARATOR_SIZE);\n\n  this.setupNodeReaderFn(this.metadata.recordSize);\n};\n\nReader.prototype.setupNodeReaderFn = function(recordSize) {\n  switch (recordSize) {\n    case 24:\n      this.readNodeLeft = readNodeLeft24;\n      this.readNodeRight = readNodeRight24;\n      break;\n    case 28:\n      this.readNodeLeft = readNodeLeft28;\n      this.readNodeRight = readNodeRight28;\n      break;\n    case 32:\n      this.readNodeLeft = readNodeLeft32;\n      this.readNodeRight = readNodeRight32;\n      break;\n  }\n};\n\n\nReader.prototype.get = function(ipAddress) {\n  var pointer = this.findAddressInTree(ipAddress);\n  return pointer ? this.resolveDataPointer(pointer) : null;\n};\n\n\nReader.prototype.findAddressInTree = function(ipAddress) {\n  var rawAddress = ipUtil.parse(ipAddress);\n  var nodeCount = this.metadata.nodeCount;\n\n  // When storing IPv4 addresses in an IPv6 tree, they are stored as-is, so they\n  // occupy the first 32-bits of the address space (from 0 to 2**32 - 1).\n  // Which means they're padded with zeros.\n  var ipStartBit = (this.metadata.ipVersion === 6 && rawAddress.length === 4) ? 128 - 32 : 0;\n\n  // Binary search tree consists of certain (`nodeCount`) number of nodes. Tree\n  // depth depends on the ip version, it's 32 for IPv4 and 128 for IPv6. Each\n  // tree node has the same fixed length and usually 6-8 bytes. It consists\n  // of two records, left and right:\n  // |         node        |\n  // | 0x000000 | 0x000000 |\n  var bit;\n  var nodeNumber = ipStartBit;\n  var pointer, offset;\n\n  for (var i = ipStartBit; i < this.metadata.treeDepth; i++) {\n    bit = ipUtil.bitAt(rawAddress, i - ipStartBit);\n    offset = nodeNumber * this.metadata.nodeByteSize;\n\n    pointer = bit ?\n      this.readNodeRight(offset) :\n      this.readNodeLeft(offset);\n\n    // Record value can point to one of three things:\n    // 1. Another node in the tree (most common case)\n    if (pointer < nodeCount) {\n      nodeNumber = pointer;\n\n    // 2. Data section address with relevant information (less common case)\n    } else if (pointer > nodeCount) {\n      return pointer;\n\n    // 3. Point to the value of `nodeCount`, which means IP address is unknown\n    } else {\n      return null;\n    }\n  }\n};\n\n\nvar readNodeRight24 = function(offset) {\n  return utils.concat3(\n    this.db[offset + 3],\n    this.db[offset + 4],\n    this.db[offset + 5]\n  );\n};\n\nvar readNodeLeft24 = function(offset) {\n  return utils.concat3(\n    this.db[offset],\n    this.db[offset + 1],\n    this.db[offset + 2]\n  );\n};\n\n\nvar readNodeLeft28 = function(offset) {\n  return utils.concat4(\n    this.db[offset + 3] >> 4,\n    this.db[offset],\n    this.db[offset + 1],\n    this.db[offset + 2]\n  );\n};\n\nvar readNodeRight28 = function(offset) {\n  return utils.concat4(\n    this.db[offset + 3] & 0x0f,\n    this.db[offset + 4],\n    this.db[offset + 5],\n    this.db[offset + 6]\n  );\n};\n\nvar readNodeLeft32 = function(offset) {\n  return this.db.readUInt32BE(offset, true);\n};\n\nvar readNodeRight32 = function(offset) {\n  return this.db.readUInt32BE(offset + 4, true);\n};\n\n\nReader.prototype.resolveDataPointer = function(pointer) {\n  if (this.cache.has(pointer)) {\n    return this.cache.get(pointer);\n  }\n\n  // In order to determine where in the file this offset really points to, we also\n  // need to know where the data section starts. This can be calculated by\n  // determining the size of the search tree in bytes and then adding an additional\n  // 16 bytes for the data section separator.\n  // So the final formula to determine the offset in the file is:\n  //     $offset_in_file = ( $record_value - $node_count )\n  //                       + $search_tree_size_in_bytes\n  var resolved = pointer - this.metadata.nodeCount + this.metadata.searchTreeSize;\n\n  var result = this.decoder.decode(resolved).value;\n  this.cache.set(pointer, result);\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-maxmind/node_modules/maxmind/lib/metadata.js":"'use strict';\n\nvar assert = require('assert');\nvar Decoder = require('./decoder');\nvar utils = require('./utils');\n\nvar METADATA_START_MARKER = new Buffer('ABCDEF4D61784D696E642E636F6D', 'hex');\n\n\nmodule.exports = Metadata;\n\nfunction Metadata(db) {\n  var offset = this.findStart(db);\n  var decoder = new Decoder(db, offset);\n  var metadata = decoder.decode(offset).value;\n\n  if (!metadata) {\n    throw new Error(this.isLegacyFormat(db) ? utils.legacyErrorMessage : 'Cannot parse binary database');\n  }\n\n  this.binaryFormatMajorVersion = metadata.binary_format_major_version;\n  this.binaryFormatMinorVersion = metadata.binary_format_minor_version;\n  this.buildEpoch = new Date(metadata.build_epoch * 1000);\n  this.databaseType = metadata.database_type;\n  this.languages = metadata.languages;\n  this.description = metadata.description;\n  this.ipVersion = metadata.ip_version;\n  this.nodeCount = metadata.node_count;\n\n  this.recordSize = metadata.record_size;\n  assert([24, 28, 32].indexOf(this.recordSize) > -1, 'Unsupported record size');\n\n  this.nodeByteSize = this.recordSize / 4;\n  this.searchTreeSize = this.nodeCount * this.nodeByteSize;\n\n  // Depth depends on the IP version, it's 32 for IPv4 and 128 for IPv6.\n  this.treeDepth = Math.pow(2, this.ipVersion + 1);\n}\n\n\nMetadata.prototype.findStart = function(db) {\n  var found = 0,\n    mlen = METADATA_START_MARKER.length - 1,\n    fsize = db.length - 1;\n\n  while (found <= mlen && fsize-- > 0) {\n    found += (db[fsize] === METADATA_START_MARKER[mlen - found]) ? 1 : -found;\n  }\n  return fsize + found;\n};\n\n\nMetadata.prototype.isLegacyFormat = function(db) {\n  var structureInfoMaxSize = 20;\n\n  for (var i = 0; i < structureInfoMaxSize; i++) {\n    var delim = db.slice(db.length - 3 - i, db.length - i);\n\n    // Look for [0xff, 0xff, 0xff] metadata delimeter\n    if (delim[0] === 255 && delim[1] === 255 && delim[2] === 255) {\n      return true;\n    }\n  }\n\n  return false;\n};\n","/home/travis/build/npmtest/node-npmtest-maxmind/node_modules/maxmind/lib/decoder.js":"'use strict';\n\nvar assert = require('assert');\nvar bigInt = require('big-integer');\nvar utils = require('./utils');\n\nvar types = [\n  'extended',         //  0\n  'pointer',          //  1\n  'utf8_string',      //  2\n  'double',           //  3\n  'bytes',            //  4\n  'uint16',           //  5\n  'uint32',           //  6\n  'map',              //  7\n  'int32',            //  8\n  'uint64',           //  9\n  'uint128',          // 10\n  'array',            // 11\n  'container',        // 12\n  'end_marker',       // 13\n  'boolean',          // 14\n  'float'             // 15\n];\n\nvar pointerValueOffset = [0, 2048, 526336, 0];\n\nfunction cursor(value, offset) {\n  return { value: value, offset: offset };\n}\n\n\nmodule.exports = Decoder;\n\nfunction Decoder(db, baseOffset) {\n  assert(this.db = db, 'File stream is required');\n  this.baseOffset = baseOffset || 0;\n}\n\n\nDecoder.prototype.decode = function(offset) {\n  var tmp,\n    ctrlByte = this.db[offset++],\n    type = types[ctrlByte >> 5];\n\n  if (type === 'pointer') {\n    tmp = this.decodePointer(ctrlByte, offset);\n    return cursor(this.decode(tmp.value).value, tmp.offset);\n  }\n\n  if (type === 'extended') {\n    tmp = this.db[offset] + 7;\n    if (tmp < 8) {\n      throw new Error('Invalid Extended Type at offset ' + offset + ' val ' + tmp);\n    }\n\n    type = types[tmp];\n    offset++;\n  }\n\n  var size = this.sizeFromCtrlByte(ctrlByte, offset);\n  return this.decodeByType(type, size.offset, size.value);\n};\n\n\nDecoder.prototype.decodeByType = function(type, offset, size) {\n  var newOffset = offset + size;\n\n  // ipv4 types occurrence stats:\n  // 3618591 x utf8_string\n  // 448163 x map\n  // 175085 x uint32\n  // 83040 x double\n  // 24745 x array\n  // 3 x uint16\n  // 1 x uint64\n  // 14 x boolean\n  switch (type) {\n    case 'utf8_string':\n      return cursor(this.decodeString(offset, size), newOffset);\n    case 'map':\n      return this.decodeMap(size, offset);\n    case 'uint32':\n      return cursor(this.decodeUint(offset, size), newOffset);\n    case 'double':\n      return cursor(this.decodeDouble(offset, size), newOffset);\n    case 'array':\n      return this.decodeArray(size, offset);\n    case 'boolean':\n      return cursor(this.decodeBoolean(size), offset);\n    case 'float':\n      return cursor(this.decodeFloat(offset, size), newOffset);\n    case 'bytes':\n      return cursor(this.decodeBytes(offset, size), newOffset);\n    case 'uint16':\n      return cursor(this.decodeUint(offset, size), newOffset);\n    case 'int32':\n      return cursor(this.decodeInt32(offset, size), newOffset);\n    case 'uint64':\n      return cursor(this.decodeUint(offset, size), newOffset);\n    case 'uint128':\n      return cursor(this.decodeUint(offset, size), newOffset);\n  }\n\n  throw new Error('Unknown type ' + type + ' at offset ' + offset);\n};\n\n\nDecoder.prototype.sizeFromCtrlByte = function(ctrlByte, offset) {\n  // The first three bits of the control byte tell you what type the field is. If\n  // these bits are all 0, then this is an \"extended\" type, which means that the\n  // *next* byte contains the actual type. Otherwise, the first three bits will\n  // contain a number from 1 to 7, the actual type for the field.\n  // var type = ctrlByte >> 3;\n\n  // The next five bits in the control byte tell you how long the data field's\n  // payload is, except for maps and pointers. Maps and pointers use this size\n  // information a bit differently.``\n\n  var size = ctrlByte & 0x1f;\n\n  // If the five bits are smaller than 29, then those bits are the payload size in\n  // bytes. For example:\n  //   01000010          UTF-8 string - 2 bytes long\n  //   01011100          UTF-8 string - 28 bytes long\n  //   11000001          unsigned 32-bit int - 1 byte long\n  //   00000011 00000011 unsigned 128-bit int - 3 bytes long\n  if (size < 29)\n    return cursor(size, offset);\n\n  // If the value is 29, then the size is 29 + *the next byte after the type\n  // specifying bytes as an unsigned integer*.\n  if (size === 29)\n    return cursor(29 + this.db[offset], offset + 1);\n\n  // If the value is 30, then the size is 285 + *the next two bytes after the type\n  // specifying bytes as a single unsigned integer*.\n  if (size === 30)\n    return cursor(285 + this.db.readUInt16BE(offset, false), offset + 2);\n\n  // At this point `size` is always 31.\n  // If the value is 31, then the size is 65,821 + *the next three bytes after the\n  // type specifying bytes as a single unsigned integer*.\n  return cursor(\n    65821 + utils.concat3(this.db[offset], this.db[offset + 1], this.db[offset + 2]),\n    offset + 3\n  );\n};\n\n\nDecoder.prototype.decodeBytes = function(offset, size) {\n  return this.db.slice(offset, offset + size);\n};\n\n\nDecoder.prototype.decodePointer = function(ctrlByte, offset) {\n  // Pointers use the last five bits in the control byte to calculate the pointer value.\n\n  // To calculate the pointer value, we start by subdiving the five bits into two\n  // groups. The first two bits indicate the size, and the next three bits are part\n  // of the value, so we end up with a control byte breaking down like this:\n  // 001SSVVV.\n  var pointerSize = ((ctrlByte >> 3) & 3);\n\n  var pointer = this.baseOffset + pointerValueOffset[pointerSize];\n  var packed = 0;\n\n  // The size can be 0, 1, 2, or 3.\n\n  // If the size is 0, the pointer is built by appending the next byte to the last\n  // three bits to produce an 11-bit value.\n  if (pointerSize === 0) {\n    packed = utils.concat2(ctrlByte & 7, this.db[offset]);\n\n  // If the size is 1, the pointer is built by appending the next two bytes to the\n  // last three bits to produce a 19-bit value + 2048.\n  } else if (pointerSize === 1) {\n    packed = utils.concat3(ctrlByte & 7, this.db[offset], this.db[offset + 1]);\n\n  // If the size is 2, the pointer is built by appending the next three bytes to the\n  // last three bits to produce a 27-bit value + 526336.\n  } else if (pointerSize === 2) {\n    packed = utils.concat4(ctrlByte & 7, this.db[offset], this.db[offset + 1], this.db[offset + 2]);\n\n  // At next point `size` is always 3.\n  // Finally, if the size is 3, the pointer's value is contained in the next four\n  // bytes as a 32-bit value. In this case, the last three bits of the control byte\n  // are ignored.\n  } else {\n    packed = this.db.readUInt32BE(offset, true);\n  }\n\n  offset += pointerSize + 1;\n  return cursor(pointer + packed, offset);\n};\n\n\nDecoder.prototype.decodeArray = function(size, offset) {\n  var tmp;\n  var array = [];\n\n  for (var i = 0; i < size; i++) {\n    tmp = this.decode(offset);\n    offset = tmp.offset;\n    array.push(tmp.value);\n  }\n\n  return cursor(array, offset);\n};\n\n\nDecoder.prototype.decodeBoolean = function(size) {\n  return size !== 0;\n};\n\n\nDecoder.prototype.decodeDouble = function(offset) {\n  return this.db.readDoubleBE(offset, true);\n};\n\n\nDecoder.prototype.decodeFloat = function(offset) {\n  return this.db.readFloatBE(offset, true);\n};\n\n\nDecoder.prototype.decodeMap = function(size, offset) {\n  var tmp;\n  var key;\n  var map = {};\n\n  for (var i = 0; i < size; i++) {\n    tmp = this.decode(offset);\n    key = tmp.value;\n    tmp = this.decode(tmp.offset);\n    offset = tmp.offset;\n    map[key] = tmp.value;\n  }\n\n  return cursor(map, offset);\n};\n\n\nDecoder.prototype.decodeInt32 = function(offset, size) {\n  if (size == 0) return 0;\n  return this.db.readInt32BE(offset, true);\n};\n\n\nDecoder.prototype.decodeUint = function(offset, size) {\n  switch (size) {\n    case 0: return 0;\n    case 1: return this.db[offset];\n    case 2: return utils.concat2(this.db[offset + 0], this.db[offset + 1]);\n    case 3: return utils.concat3(this.db[offset + 0], this.db[offset + 1], this.db[offset + 2]);\n    case 4: return utils.concat4(this.db[offset + 0], this.db[offset + 1], this.db[offset + 2], this.db[offset + 3]);\n    case 8: return this.decodeBigUint(offset, size);\n    case 16: return this.decodeBigUint(offset, size);\n  }\n  return 0;\n};\n\n\nDecoder.prototype.decodeBigUint = function(offset, size) {\n  var buffer = new Buffer(size);\n  this.db.copy(buffer, 0, offset, offset + size);\n\n  var integer = 0;\n  var numberOfLongs = size / 4;\n  for (var i = 0; i < numberOfLongs; i++) {\n    integer = bigInt(integer).multiply(4294967296).add(buffer.readUInt32BE(i << 2, true));\n  }\n\n  return integer.toString();\n};\n\n\nDecoder.prototype.decodeString = function(offset, size) {\n  return this.db.utf8Slice(offset, offset + size);\n};\n","/home/travis/build/npmtest/node-npmtest-maxmind/node_modules/maxmind/lib/utils.js":"'use strict';\n\nexports.concat2 = function(a, b) {\n  return (a << 8) | b;\n};\n\nexports.concat3 = function(a, b, c) {\n  return (a << 16) | (b << 8) | c;\n};\n\nexports.concat4 = function(a, b, c, d) {\n  return (a << 24) | (b << 16) | (c << 8) | d;\n};\n\nexports.legacyErrorMessage =\n  'Maxmind v1 module has changed API.\\n\\\n  Upgrade instructions can be found here: \\\n  https://github.com/runk/node-maxmind/wiki/Migration-guide\\n\\\n  If you want to use legacy libary then explicitly install maxmind@0.6';\n","/home/travis/build/npmtest/node-npmtest-maxmind/node_modules/maxmind/lib/ip.js":"'use strict';\n\nvar net = require('net');\n\n\nvar parseIPv4 = function(ip) {\n  ip = ip.split('.', 4);\n\n  var o0 = parseInt(ip[0]),\n    o1 = parseInt(ip[1]),\n    o2 = parseInt(ip[2]),\n    o3 = parseInt(ip[3]);\n\n  return [o0, o1, o2, o3];\n};\n\n\nvar parseIPv6 = function(ip) {\n  var addr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  var i;\n  var parsed;\n  var chunk;\n\n  var hex = function(v) {\n    v = parseInt(v, 10).toString(16);\n    return (v.length == 2) ? v : '0' + v;\n  };\n\n  // ipv4 e.g. `::ffff:64.17.254.216`\n  if (ip.indexOf('.') > -1) {\n    ip = ip.replace(/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/, function(match, a, b, c, d) {\n      return hex(a) + hex(b) + ':' + hex(c) + hex(d);\n    });\n  }\n\n  var parts = ip.split('::', 2),\n    left = parts[0],\n    right = parts[1];\n\n  if (left) {\n    parsed = left.split(':');\n    for (i = 0; i < parsed.length; i++) {\n      chunk = parseInt(parsed[i], 16);\n      addr[i * 2] = chunk >> 8;\n      addr[i * 2 + 1] = chunk & 0xff;\n    }\n  }\n\n\n  if (right) {\n    parsed = right.split(':');\n    var offset = 16 - (parsed.length * 2); // 2 bytes per chunk\n    for (i = 0; i < parsed.length; i++) {\n      chunk = parseInt(parsed[i], 16);\n      addr[offset + (i * 2)] = chunk >> 8;\n      addr[offset + (i * 2 + 1)] = chunk & 0xff;\n    }\n  }\n\n  return addr;\n};\n\n\nexports.parse = function(ip) {\n  return (ip.indexOf(':') === -1) ? parseIPv4(ip) : parseIPv6(ip);\n};\n\n\nexports.bitAt = function(rawAddress, idx) {\n  // 8 bits per octet in the buffer (>>3 is slightly faster than Math.floor(idx/8))\n  var bufIdx = idx >> 3;\n\n  // Offset within the octet (basicallg equivalent to 8  - (idx % 8))\n  var bitIdx = 7 ^ (idx & 7);\n\n  // Shift the offset rightwards by bitIdx bits and & it to grab the bit\n  return (rawAddress[bufIdx] >>> bitIdx) & 1;\n};\n\n\nexports.validate = function(ip) {\n  var version = net.isIP(ip);\n  return version === 4 || version === 6;\n};\n","/home/travis/build/npmtest/node-npmtest-maxmind/node_modules/maxmind/lib/is-gzip.js":"'use strict';\n\nmodule.exports = function(buf) {\n  if (!buf || buf.length < 3) {\n    return false;\n  }\n\n  return buf[0] === 0x1f && buf[1] === 0x8b && buf[2] === 0x08;\n};\n"}